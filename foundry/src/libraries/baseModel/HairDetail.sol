// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.19;

import {SVGBody} from "./SVGBody.sol";
import {Colors} from "src/types/Constants.sol";
import {BytesConverter} from "src/libraries/BytesConverter.sol";

library HairDetail {
    error HairDetail__InvalidType(uint8 id);
    error HairDetail__InvalidColor(uint8 id);

    using Colors for bytes3;

    enum HairColor {
        BLONDE,
        ORANGE,
        BLACK,
        WHITE,
        BROWN,
        BLUE,
        PINK
    }

    enum HairType {
        NONE,
        AFRO,
        BALD,
        BOB_CUT,
        BUN,
        LONG_HAIR,
        PIXIE_CUT,
        SHORT_HAIR
    }

    /*//////////////////////////////////////////////////////////////
                           INTERNAL FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    /// @dev Retrieves the base and shadow colors for a given hair color
    /// @param id The hair color ID
    function getColorsForHair(uint8 id) internal pure returns (bytes3 baseColor, bytes3 shadowColor) {
        return _getColors(HairColor(id));
    }

    /// @dev SVG content for the "Afro Back" hair type
    function afroBackSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor, bytes3 shadowColor) = getColorsForHair(id);
        return renderAfroBackSVG(baseColor, shadowColor);
    }

    /// @dev SVG content for the "Afro Front" hair type
    function afroFrontSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor, bytes3 shadowColor) = getColorsForHair(id);
        return renderAfroFrontSVG(baseColor, shadowColor);
    }

    /// @dev Combines the SVG content for the "Afro Back" and "Afro Front" hair types
    function afroHairSVG(uint8 id) internal pure returns (string memory, string memory) {
        return (afroBackSVG(id), afroFrontSVG(id));
    }

    /// @dev SVG content for the "Bald Hair" hair type
    function baldHairSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor,) = getColorsForHair(id);
        return renderBaldHairSVG(baseColor);
    }

    /// @dev SVG content for the "Bob Cut" hair type
    function bobCutFrontSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor,) = getColorsForHair(id);
        return renderBobCutFrontSVG(baseColor);
    }

    /// @dev SVG content for the "Bob Cut Back" hair type
    function bobCutBackSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor, bytes3 shadowColor) = getColorsForHair(id);
        return renderBobCutBackSVG(baseColor, shadowColor);
    }

    /// @dev Combines the SVG content for the "Bob Cut" hair type
    function bobCutSVG(uint8 id) internal pure returns (string memory, string memory) {
        return (bobCutBackSVG(id), bobCutFrontSVG(id));
    }

    /// @dev SVG content for the "Bun" hair type
    function bunHairSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor, bytes3 shadowColor) = getColorsForHair(id);
        return renderBunHairSVG(baseColor, shadowColor);
    }

    /// @dev SVG content for the "Long Hair Front" hair type
    function longHairFrontSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor, bytes3 shadowColor) = getColorsForHair(id);
        return renderLongHairFrontSVG(baseColor, shadowColor);
    }

    /// @dev SVG content for the "Long Hair Back" hair type
    function longHairBackSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor,) = getColorsForHair(id);
        return renderLongHairBackSVG(baseColor);
    }

    /// @dev Combines the SVG content for the "Long Hair" hair type
    function longHairSVG(uint8 id) internal pure returns (string memory, string memory) {
        return (longHairBackSVG(id), longHairFrontSVG(id));
    }

    /// @dev SVG content for the "Pixie Cut" hair type
    function pixieCutSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor, bytes3 shadowColor) = getColorsForHair(id);
        return renderPixieCutSVG(baseColor, shadowColor);
    }

    /// @dev SVG content for the "Short Hair" hair type
    function shortHairSVG(uint8 id) internal pure returns (string memory) {
        (bytes3 baseColor, bytes3 shadowColor) = getColorsForHair(id);
        return renderShortHairSVG(baseColor, shadowColor);
    }

    /// @dev Returns the SVG and name for the given hair type
    function getHairById(uint8 id, uint8 color) internal pure returns (string memory svg, string memory name) {
        string[8] memory hairs =
            ["", "", baldHairSVG(color), "", bunHairSVG(color), "", pixieCutSVG(color), shortHairSVG(color)];

        if (id >= hairs.length) revert HairDetail__InvalidType(id);

        svg = hairs[id];
        name = getHairTypeName(id);
        return (svg, name);
    }

    function getHairColorName(uint8 id) internal pure returns (string memory) {
        string[7] memory hairColors = ["Blonde", "Orange", "Black", "White", "Brown", "Blue", "Pink"];

        if (id >= hairColors.length) revert HairDetail__InvalidColor(id);
        return hairColors[id];
    }

    function getHairTypeName(uint8 id) internal pure returns (string memory) {
        string[8] memory hairTypes = ["None", "Afro", "Bald", "Bob Cut", "Bun", "Long Hair", "Pixie Cut", "Short Hair"];

        if (id >= hairTypes.length) revert HairDetail__InvalidType(id);
        return hairTypes[id];
    }

    /*//////////////////////////////////////////////////////////////
                           PRIVATE FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    /// @dev Helper functions to return colors
    function _getColors(HairColor color) private pure returns (bytes3, bytes3) {
        if (color == HairColor.BLONDE) return (Colors.HAIR_BLONDE_BASE, Colors.HAIR_BLONDE_SHADOW);
        if (color == HairColor.ORANGE) return (Colors.HAIR_ORANGE_BASE, Colors.HAIR_ORANGE_SHADOW);
        if (color == HairColor.BLACK) return (Colors.HAIR_BLACK_BASE, Colors.HAIR_BLACK_SHADOW);
        if (color == HairColor.WHITE) return (Colors.HAIR_WHITE_BASE, Colors.HAIR_WHITE_SHADOW);
        if (color == HairColor.BROWN) return (Colors.HAIR_BROWN_BASE, Colors.HAIR_BROWN_SHADOW);
        if (color == HairColor.BLUE) return (Colors.HAIR_BLUE_BASE, Colors.HAIR_BLUE_SHADOW);
        if (color == HairColor.PINK) return (Colors.HAIR_PINK_BASE, Colors.HAIR_PINK_SHADOW);
        revert HairDetail__InvalidColor(uint8(color));
    }

    function renderAfroBackSVG(bytes3 baseColor, bytes3 shadowColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);
        string memory shadowHex = BytesConverter.bytesToHex(shadowColor);

        string memory s1 = string(
            abi.encodePacked(
                '<path d="M833.15,369a58.35,58.35,0,0,0-35.89-54.16,58.56,58.56,0,0,0,25.82-48.77c0-27.77-19-51-44.47-56.88a59.13,59.13,0,0,0,7.51-28.9C786.12,148.1,760.55,122,729,122a55.89,55.89,0,0,0-24.2,5.49,58.35,58.35,0,0,0,.67-8.92c0-32.21-25.57-58.33-57.12-58.33a56.49,56.49,0,0,0-43.76,20.86c-1.61-30.74-26.53-55.17-57-55.17A56.9,56.9,0,0,0,497.6,56a56.93,56.93,0,0,0-50-30.07c-30.5,0-55.42,24.43-57,55.17a56.53,56.53,0,0,0-43.77-20.86c-31.53,0-57.11,26.11-57.11,58.33a59.65,59.65,0,0,0,.66,8.92A55.76,55.76,0,0,0,266.21,122c-31.54,0-57.12,26.12-57.12,58.33a59,59,0,0,0,7.51,28.9c-25.45,5.88-44.46,29.11-44.46,56.88A58.56,58.56,0,0,0,198,314.86a58.83,58.83,0,0,0-1.13,107.85,58.81,58.81,0,0,0-14.6,39c0,28.51,20.05,52.25,46.54,57.33-11.51,10.31,545.36,10.93,534.18.55,28.2-3.57,50-28.11,50-57.87a58.87,58.87,0,0,0-14.61-39A58.4,58.4,0,0,0,833.15,369ZM270.81,513.54c-.93-.52-1.89-1-2.85-1.41C268.93,511.56,270.81,513.54,270.81,513.54Z" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M470,505.43a51,51,0,0,1-85.38-36.67,51.1,51.1,0,0,1-63.44-66.59,51.18,51.18,0,0,1-32.54-87.48,51.32,51.32,0,0,1-1.26-93.62A51.42,51.42,0,0,1,327,136.89h.16a51.55,51.55,0,0,1,50-63.89,53,53,0,0,1,5.66.31,56.13,56.13,0,0,0-36-13.09c-31.54,0-57.11,26.11-57.11,58.33a59.65,59.65,0,0,0,.66,8.92A55.76,55.76,0,0,0,266.21,122c-31.54,0-57.12,26.12-57.12,58.33a59,59,0,0,0,7.51,28.9c-25.45,5.88-44.46,29.11-44.46,56.88A58.56,58.56,0,0,0,198,314.86a58.83,58.83,0,0,0-1.13,107.85,58.81,58.81,0,0,0-14.6,39c0,28.51,20.05,52.25,46.54,57.33-5.61,5,123.81,7.75,256.66,8A51.14,51.14,0,0,1,470,505.43Z" style="fill:',
                shadowHex,
                '"/>'
            )
        );

        string memory s3 = string(
            abi.encodePacked(
                '<path d="M741.2,386l-35,78.16,39.47,58.61c12.24-.91,18.61-2,17.31-3.17,28.2-3.57,50-28.11,50-57.87a60.75,60.75,0,0,0-.8-9.7C792.18,391.39,741.2,386,741.2,386Z" style="fill:',
                shadowHex,
                '"/>',
                '<path d="M833.15,369a58.35,58.35,0,0,0-35.89-54.16,58.56,58.56,0,0,0,25.82-48.77c0-27.77-19-51-44.47-56.88a59.13,59.13,0,0,0,7.51-28.9C786.12,148.1,760.55,122,729,122a55.89,55.89,0,0,0-24.2,5.49,58.35,58.35,0,0,0,.67-8.92c0-32.21-25.57-58.33-57.12-58.33a56.49,56.49,0,0,0-43.76,20.86c-1.61-30.74-26.53-55.17-57-55.17A56.9,56.9,0,0,0,497.6,56a56.93,56.93,0,0,0-50-30.07c-30.5,0-55.42,24.43-57,55.17a56.53,56.53,0,0,0-43.77-20.86c-31.53,0-57.11,26.11-57.11,58.33a59.65,59.65,0,0,0,.66,8.92A55.76,55.76,0,0,0,266.21,122c-31.54,0-57.12,26.12-57.12,58.33a59,59,0,0,0,7.51,28.9c-25.45,5.88-44.46,29.11-44.46,56.88A58.56,58.56,0,0,0,198,314.86a58.83,58.83,0,0,0-1.13,107.85,58.81,58.81,0,0,0-14.6,39c0,28.51,20.05,52.25,46.54,57.33-11.51,10.31,545.36,10.93,534.18.55,28.2-3.57,50-28.11,50-57.87a58.87,58.87,0,0,0-14.61-39A58.4,58.4,0,0,0,833.15,369Z" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>'
            )
        );

        return SVGBody.fullSVG(
            'id="afro-back" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(abi.encodePacked(s1, s2, s3))
        );
    }

    function renderAfroFrontSVG(bytes3 baseColor, bytes3 shadowColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);
        string memory shadowHex = BytesConverter.bytesToHex(shadowColor);

        string memory s1 = string(
            abi.encodePacked(
                '<path d="M558.42,406.88c-12.87,24-60,37.45-63.83,31.42-4.3-6.73,37.85-55.32,13.9-106.14" style="fill:#8d5638"/>',
                '<path d="M500.15,221.81C369,221.81,247.79,328.25,226,457c0,0,201.33,15.23,274.66-66.75-4.65,22.65-17.72,39.87-15.51,43.33,3.08,4.84,40.92-5.92,51.25-25.22l-3.66-5.48C582.65,421,680.23,443.46,746,375.26,702.52,285,604.61,221.81,500.15,221.81Z" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M331.52,454.81a51.09,51.09,0,0,1-10.35-52.64,51.12,51.12,0,0,1-47.23-58.35c-24.09,33.69-41,72.3-48,113.18A671.08,671.08,0,0,0,331.52,454.81Z" style="fill:',
                shadowHex,
                '"/>',
                '<path d="M739.66,389.6C665,447,579.07,424.7,533.51,405.69c-10.14,17.94-45.26,27.89-48.15,23.36-2-3.08,8.82-17.65,13.78-37.16-74.28,80.27-259.85,72-259.85,72" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>'
            )
        );

        string memory s3 = string(
            abi.encodePacked(
                '<path d="M280.92,140.17a53.59,53.59,0,0,0-20.26,5A45.83,45.83,0,0,0,245,157a18.94,18.94,0,0,0-1.53,1.92c-.48.66-1,1.28-1.46,2a43.23,43.23,0,0,0-2.56,4.23,52.32,52.32,0,0,0-3.9,9.18,62.77,62.77,0,0,0-2.29,20.8A36.91,36.91,0,0,1,229.42,173l.53-2.86.29-1.44c.11-.47.27-.93.41-1.4.28-.94.56-1.88.87-2.81s.76-1.8,1.14-2.71a43.25,43.25,0,0,1,2.76-5.21c.51-.85,1.14-1.61,1.7-2.42a24.27,24.27,0,0,1,1.82-2.33,39.88,39.88,0,0,1,19.58-12.56A34.18,34.18,0,0,1,280.92,140.17Z" style="fill:#ffffff"/>',
                '<path d="M358.88,77.15a62.84,62.84,0,0,0-18,2,52.26,52.26,0,0,0-15.47,7.06A51.64,51.64,0,0,0,313.09,98c-.84,1.18-1.8,2.31-2.53,3.58l-1.21,1.88c-.43.62-.71,1.3-1.09,2a73.25,73.25,0,0,0-4.1,8.38,28.54,28.54,0,0,1,.39-9.7c.17-.8.27-1.63.52-2.42l.74-2.36a31.32,31.32,0,0,1,1.91-4.61A39,39,0,0,1,321,79.59,39.38,39.38,0,0,1,339.89,73,32.35,32.35,0,0,1,358.88,77.15Z" style="fill:#ffffff"/>'
            )
        );

        return SVGBody.fullSVG(
            'id="afro-front" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(abi.encodePacked(s1, s2, s3))
        );
    }

    function renderBaldHairSVG(bytes3 baseColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);

        string memory s1 = string(
            abi.encodePacked(
                '<path d="M425.22,300.35a148.61,148.61,0,0,1,35.91-15A151.13,151.13,0,0,1,500,280,145.16,145.16,0,0,1,539,285.08a138.61,138.61,0,0,1,35.82,15.27,315.9,315.9,0,0,0-37.19-9.13A210.64,210.64,0,0,0,500.05,288a222,222,0,0,0-37.55,3.48A366.93,366.93,0,0,0,425.22,300.35Z" style="fill:#592d3d"/>',
                '<path d="M425.22,328.3a148.61,148.61,0,0,1,35.91-15A151.56,151.56,0,0,1,500,308,145.15,145.15,0,0,1,539,313a138.61,138.61,0,0,1,35.82,15.27,317.89,317.89,0,0,0-37.19-9.13,210.64,210.64,0,0,0-37.54-3.23,222,222,0,0,0-37.55,3.48A369.62,369.62,0,0,0,425.22,328.3Z" style="fill:#592d3d"/>'
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M574.78,328.43a310.55,310.55,0,0,1-37.2,5.68Q518.85,335.91,500,336c-12.55,0-25.1-.47-37.6-1.64a271,271,0,0,1-37.19-5.91c12.59-.39,25-.34,37.49-.37L500,328l37.29-.13C549.73,327.87,562.2,327.86,574.78,328.43Z" style="fill:#8d5638"/>',
                '<path d="M574.78,300.47a330.88,330.88,0,0,1-37.24,5.22q-18.72,1.63-37.53,1.71c-12.53.05-25.06-.42-37.56-1.48a288,288,0,0,1-37.23-5.45c12.57-.59,25-.7,37.47-.84L500,299.4c12.42,0,24.85-.06,37.31,0S562.22,299.7,574.78,300.47Z" style="fill:#8d5638"/>',
                '<path d="M871.11,500c-94.26-5.93-88.36-172.82-144.1-140.14h0l.42.69c-1.08,8.7-11.09,100.12,26.09,224.1.41-1.25.81-2.51,1.21-3.77,2,5.4,17,39.1,75.81,23.16-40.58-34.22-31.47-75.27-31.47-75.27S843.62,530.09,871.11,500Z" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s3 = string(
            abi.encodePacked(
                '<path d="M871.11,500c-94.26-5.93-88.36-172.82-144.1-140.14h0l.42.69c-1.08,8.7-11.09,100.12,26.09,224.1.41-1.25.81-2.51,1.21-3.77,2,5.4,17,39.1,75.81,23.16-40.58-34.22-31.47-75.27-31.47-75.27S843.62,530.09,871.11,500Z" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>',
                '<path d="M766.75,500a121.9,121.9,0,0,1,1.52,21.66,210.12,210.12,0,0,1-1.6,21.69q-.7,5.4-1.62,10.78c-.65,3.57-1.35,7.14-2.16,10.69a190.76,190.76,0,0,1-6,21l-7.59-2.54c2.11-6.73,4.13-13.49,5.92-20.32l1.32-5.13,1.22-5.16,1.17-5.17,1.07-5.2c1.41-6.94,2.5-13.94,3.53-21S765.53,507.16,766.75,500Z" style="fill:#592d3d"/>'
            )
        );

        string memory s4 = string(
            abi.encodePacked(
                '<path d="M730.85,358.46A199.08,199.08,0,0,1,742,378.52c.83,1.72,1.62,3.46,2.42,5.2l2.3,5.25,2.15,5.32,2,5.36a210.27,210.27,0,0,1,6.64,21.88,127.56,127.56,0,0,1,3.37,22.58c-2.76-7.11-5.29-14.18-7.94-21.19s-5.32-13.95-8.36-20.76l-2.29-5.09-2.39-5-2.45-5-2.55-4.95c-3.43-6.59-7.09-13-10.87-19.43Z" style="fill:#592d3d"/>',
                '<path d="M128.89,500c94.26-5.93,88.36-172.82,144.1-140.14h0l-.42.69c1.08,8.7,11.09,100.12-26.09,224.1-.41-1.25-.81-2.51-1.21-3.77-2,5.4-17,39.1-75.81,23.16,40.58-34.22,31.47-75.27,31.47-75.27S156.38,530.09,128.89,500Z" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s5 = string(
            abi.encodePacked(
                '<path d="M128.89,500c94.26-5.93,88.36-172.82,144.1-140.14h0l-.42.69c1.08,8.7,11.09,100.12-26.09,224.1-.41-1.25-.81-2.51-1.21-3.77-2,5.4-17,39.1-75.81,23.16,40.58-34.22,31.47-75.27,31.47-75.27S156.38,530.09,128.89,500Z" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>',
                '<path d="M233.25,500c1.22,7.16,2.18,14.24,3.24,21.28s2.12,14.05,3.53,21l1.07,5.2,1.17,5.17,1.22,5.16,1.32,5.13c1.79,6.83,3.8,13.59,5.92,20.32l-7.59,2.54a190.76,190.76,0,0,1-6-21c-.81-3.55-1.51-7.12-2.16-10.69s-1.15-7.18-1.62-10.78a210.12,210.12,0,0,1-1.6-21.69A121.9,121.9,0,0,1,233.25,500Z" style="fill:#592d3d"/>'
            )
        );

        string memory s6 = string(
            abi.encodePacked(
                '<path d="M276,362.65c-3.78,6.39-7.44,12.84-10.87,19.43L262.55,387l-2.45,5-2.39,5-2.29,5.09c-3,6.81-5.74,13.76-8.36,20.76s-5.18,14.08-7.94,21.19a127.56,127.56,0,0,1,3.37-22.58,210.27,210.27,0,0,1,6.64-21.88l2-5.36L253.3,389l2.3-5.25c.8-1.74,1.59-3.48,2.42-5.2a199.08,199.08,0,0,1,11.13-20.06Z" style="fill:#592d3d"/>',
                '<path d="M198.29,528.85l-1.6-15.59c-.26-2.66-.59-5.32-.79-8-.07-1.36-.15-2.72-.11-4.13a28.85,28.85,0,0,1,.3-4.29,30.11,30.11,0,0,1,4.45,7.27c.57,1.27,1.06,2.57,1.51,3.88s.88,2.63,1.29,4,.76,2.67,1.1,4,.63,2.72.89,4.09.49,2.75.65,4.15a36.91,36.91,0,0,1,.31,4.34Z" style="fill:#592d3d"/>',
                '<path d="M793.65,527.37a36.62,36.62,0,0,1,.88-6.66c.24-1.07.53-2.14.82-3.2s.66-2.11,1-3.15a39.45,39.45,0,0,1,2.68-6.07,17.68,17.68,0,0,1,4.45-5.25,33.5,33.5,0,0,1,.11,6.68c-.09,1-.18,2.09-.31,3.1L803,515.9l-.63,6.1c-.22,2-.43,4.09-.72,5.93Z" style="fill:#592d3d"/>'
            )
        );

        return SVGBody.fullSVG(
            'id="bald-hair" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(abi.encodePacked(s1, s2, s3, s4, s5, s6))
        );
    }

    function renderBobCutFrontSVG(bytes3 baseColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);

        string memory s1 = string(
            abi.encodePacked(
                '<rect x="290.23" y="414.02" width="439.24" height="64.15" style="fill:none "/>',
                '<path d="M710,667.66q-4.71,5.82-9.71,11.37C697.79,681.8,702.87,677.91,710,667.66Zm15-316.55C694.5,296.7,641.5,259.24,580.22,242l-6.35-1.71c-22.7-6.28-46.62-7-71.32-7-26.69,0-52.46,2.74-76.77,10l-4.26,1.27A283.11,283.11,0,0,0,332.67,294q-4.37,3.58-8.57,7.32c-28.34,23.69-50.34,53.69-65.47,87.9q-2.2,4.92-4.16,9.93a212.31,212.31,0,0,0-9.41,30.61C213,556.34,262.89,634,307.17,681.6c4.37,4.7-57.93-101.85-17.42-216,7.73-.29,20.24-.51,36.19-.67l15.5-50.61,17.44,50.38c27.4-.13,59.88-.15,93.88-.12l12.32-52.36L479,464.6c74.37.14,151.44.52,195.28.77l13.2-52.17,15,52.33,8.21.05C760.78,572,728.5,641.13,710,667.66A265.62,265.62,0,0,0,769.3,500C769.3,413.58,725,351.11,725,351.11Z" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M710,667.66q-4.71,5.82-9.71,11.37C697.79,681.8,702.87,677.91,710,667.66Zm15-316.55C694.5,296.7,641.5,259.24,580.22,242l-6.35-1.71c-22.7-6.28-46.62-7-71.32-7-26.69,0-52.46,2.74-76.77,10l-4.26,1.27A283.11,283.11,0,0,0,332.67,294q-4.37,3.58-8.57,7.32c-28.34,23.69-50.34,53.69-65.47,87.9q-2.2,4.92-4.16,9.93a212.31,212.31,0,0,0-9.41,30.61C213,556.34,262.89,634,307.17,681.6c4.37,4.7-57.93-101.85-17.42-216,7.73-.29,20.24-.51,36.19-.67l15.5-50.61,17.44,50.38c27.4-.13,59.88-.15,93.88-.12l12.32-52.36L479,464.6c74.37.14,151.44.52,195.28.77l13.2-52.17,15,52.33,8.21.05C760.78,572,728.5,641.13,710,667.66A265.62,265.62,0,0,0,769.3,500C769.3,413.58,725,351.11,725,351.11Z" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>',
                '<path d="M584.15,228l-6.47-1.74c-25.21-7-50.93-7.55-75.13-7.55-30.59,0-57.07,3.49-80.91,10.64l-4.26,1.27-.49.15a299.89,299.89,0,0,0-93.42,52c-3,2.46-6,5-8.84,7.55-29.63,24.82-52.93,56.11-69.24,93-1.56,3.49-3,7.05-4.42,10.57-4.18,10.69-21.29,59.77-23.75,70.65l72.53,1c7.73-.29,20.24-.51,36.19-.67l15.5-50.61,17.44,50.38c27.4-.13,59.88-.15,93.88-.12l12.32-52.36L479,464.6c74.37.14,151.44.52,195.28.77l13.2-52.17,15,52.33,8.21.05L783.8,500c0-86.19-41.3-149-46.48-156.6C706,288,651.63,247,584.15,228ZM750.31,547.25c-3.17-25.92-11.17-55.26-26.51-87.84l-3.89-8.27-6.49,0-26.78-93.63L663,450.81c-40.43-.22-107.06-.54-172.86-.69l-25.95-97.57-22.94,97.5c-27.4,0-51.55,0-72.09.09L340.6,367.53l-25.42,83c-11.45.15-20.16.34-26,.56l-9.83.38-3.29,9.26C261.72,501.22,257.92,545,264.76,591c-15.9-40-22.46-91.39-5.65-157.63l.09-.38A197.7,197.7,0,0,1,268,404.47c1.2-3.09,2.51-6.22,3.91-9.35,14.54-32.86,35.24-60.67,61.51-82.63l.33-.29c2.65-2.35,5.39-4.69,8.14-6.95a270.41,270.41,0,0,1,84-46.87l4.05-1.2c21.12-6.34,44.87-9.43,72.6-9.43,22.22,0,45.73.51,67.45,6.52l6.38,1.71c60.24,17,108.53,53.27,136,102.23l.37.66.44.63c.42.59,41.61,59.63,41.61,140.5A252.08,252.08,0,0,1,750.31,547.25Z" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s3 = string(
            abi.encodePacked(
                '<path d="M710,667.66q-4.71,5.82-9.71,11.37C697.79,681.8,702.87,677.91,710,667.66ZM307.17,681.6c4.37,4.7-57.93-101.85-17.42-216,7.73-.29,20.24-.51,36.19-.67l15.5-50.61,17.44,50.38c27.4-.13,59.88-.15,93.88-.12l12.32-52.36L479,464.6c74.37.14,151.44.52,195.28.77l13.2-52.17,15,52.33,8.21.05C760.78,572,728.5,641.13,710,667.66" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>',
                '<path d="M237.55,468.26a143,143,0,0,1,11.42-38" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s4 = string(
            abi.encodePacked(
                '<path d="M231.6,467.51c.09-1,.18-1.85.32-2.73s.29-1.72.46-2.58c.35-1.7.75-3.38,1.23-5a78.48,78.48,0,0,1,3.47-9.75,66.09,66.09,0,0,1,4.7-9.22,29.18,29.18,0,0,1,7.19-7.91,50.46,50.46,0,0,1-.48,10.43c-.25,1.63-.51,3.25-.83,4.84s-.58,3.19-.83,4.78l-1.63,9.49-.83,4.68c-.12.78-.28,1.56-.42,2.32s-.3,1.57-.44,2.19Z" style="fill:#592d3d"/>',
                '<path d="M769.33,496s-.46-20.78-8.37-47.63" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s5 = string(
            abi.encodePacked(
                '<path d="M763.33,496.12l-.24-2.76c-.08-1-.16-1.93-.22-2.89l-.45-5.84-.91-11.8c-.3-3.95-.71-7.91-1-11.93-.08-2-.16-4.06-.1-6.14a47.58,47.58,0,0,1,.5-6.4,42.78,42.78,0,0,1,6.58,10.89,62.13,62.13,0,0,1,2.17,5.84c.67,2,1.24,4,1.81,6a111.89,111.89,0,0,1,2.69,12.17c.33,2.05.63,4.12.81,6.21q.16,1.56.24,3.15c.06,1.07.08,2.07.07,3.28Z" style="fill:#592d3d"/>',
                '<path d="M506.7,235.5a369.62,369.62,0,0,0-42.48,4.93c-3.48.68-7,1.42-10.44,2.06s-6.9,1.61-10.35,2.41l-10.26,2.72c-3.4,1-6.77,2.08-10.15,3.12a314.87,314.87,0,0,0-39.44,15.73,348.17,348.17,0,0,0-37.24,21,183.41,183.41,0,0,1,35.08-25.14A219.23,219.23,0,0,1,421.18,245c3.48-1,6.94-2.09,10.42-3.05s7-1.82,10.55-2.6,7.1-1.4,10.65-2,7.16-1.07,10.74-1.52A190,190,0,0,1,506.7,235.5Z" style="fill:#ffffff"/>'
            )
        );

        return SVGBody.fullSVG(
            'id="bob-cut-front" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(abi.encodePacked(s1, s2, s3, s4, s5))
        );
    }

    function renderBobCutBackSVG(bytes3 baseColor, bytes3 shadowColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);
        string memory shadowHex = BytesConverter.bytesToHex(shadowColor);

        string memory s1 = string(
            abi.encodePacked(
                '<path d="M501.71,209.52c-166.14,0-300.83,134.68-300.83,300.83V673.78c9.48,10.52,25.37,19.57,46,27.19L260.2,661.2l14.46,48.46c152.76,40.64,466.71,25.28,527.88-35.88V510.35C802.54,344.2,667.85,209.52,501.71,209.52Z" style="fill:',
                baseHex,
                '"/>',
                '<path d="M242.87,699.45c1.32.51,2.65,1,4,1.52L260.2,661.2l14.46,48.46c45.22,12,104.55,19.15,167.28,21.63l27.28-26.22L235.81,529.43S229.67,630.88,242.87,699.45Z" style="fill:',
                shadowHex,
                '"/>'
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M617.2,552.78l25.31,170.76c34.8-4.34,66.62-10.27,93.11-17.73h0s33.09-36.89,29.52-176.38S617.2,552.78,617.2,552.78Z" style="fill:',
                shadowHex,
                '"/>',
                '<path d="M501.71,209.52c-166.14,0-300.83,134.68-300.83,300.83V673.78c9.48,10.52,25.37,19.57,46,27.19L260.2,661.2l14.46,48.46c152.76,40.64,466.71,25.28,527.88-35.88V510.35C802.54,344.2,667.85,209.52,501.71,209.52Z" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>'
            )
        );

        return SVGBody.fullSVG(
            'id="bob-cut-back" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"  ',
            string(abi.encodePacked(s1, s2))
        );
    }

    function renderBunHairSVG(bytes3 baseColor, bytes3 shadowColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);
        string memory shadowHex = BytesConverter.bytesToHex(shadowColor);

        string memory s1 = string(
            abi.encodePacked(
                '<circle cx="499.7" cy="170.67" r="107.58" style="fill:',
                baseHex,
                '"/>',
                '<path d="M559.29,397.34c-12.87,24-60,37.44-63.83,31.42-4.3-6.73,37.84-55.32,13.9-106.14" style="fill:',
                shadowHex,
                '"/>'
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M719,353.29l-54.89,51.95c123.11,138.3,21.15,285.91,30.16,276a265.76,265.76,0,0,0,69-179C763.23,415.76,719,353.29,719,353.29Z" style="fill:',
                shadowHex,
                '"/>',
                '<path d="M420.82,134.59A71.58,71.58,0,0,1,433,112.84c1.37-1.59,2.72-3.21,4.16-4.74s3-3,4.53-4.41,3.21-2.73,4.88-4,3.41-2.5,5.17-3.65,3.6-2.21,5.47-3.19l2.82-1.43a31,31,0,0,1,2.86-1.35c2-.76,3.89-1.62,5.89-2.29s4-1.32,6-1.81a72,72,0,0,1,24.86-2,112.32,112.32,0,0,0-24,5c-1,.26-1.9.7-2.85,1l-2.85,1c-1.88.73-3.69,1.65-5.54,2.45s-3.58,1.85-5.38,2.77-3.44,2.09-5.17,3.12-3.33,2.28-5,3.41-3.15,2.52-4.76,3.75-3,2.68-4.53,4l-4.28,4.31A110.47,110.47,0,0,0,420.82,134.59Z" style="fill:#ffffff"/>'
            )
        );

        string memory s3 = string(
            abi.encodePacked(
                '<path d="M409.8,229.76C429,259,435.67,233.25,498,233.25c107.21,0,73.62,25,92.69-5.15-27.59-9.65-44-19.39-88.13-19.39C460.26,208.71,438.69,219.05,409.8,229.76Z" style="fill:',
                shadowHex,
                '"/>',
                '<circle cx="499.7" cy="170.67" r="107.58" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>'
            )
        );

        string memory s4 = string(
            abi.encodePacked(
                '<path d="M421.52,244.56C335.16,273.62,263.78,346.74,245.06,429.8,213,556.34,262.89,634,307.17,681.6c4.37,4.7-69.46-138.26-2.43-241,61.1-2.32,152.42-14.38,195.78-62.86C496.18,398.87,484,415,486,418.18c2.88,4.51,38.19-5.53,47.84-23.54l.83-3.61c34.72,12.58,91.76,26.59,144,6.61C801.81,535.94,691.29,689,700.3,679a265.78,265.78,0,0,0,69-179c0-86.42-44.28-148.89-44.28-148.89C694.5,296.7,641.5,259.24,580.22,242" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s5 = string(
            abi.encodePacked(
                '<path d="M326.66,439.38c5.38-52.22,25-112.5,64.7-181.9h0q-4.07,1.88-8.06,3.88l-.59.29c-1.22.61-2.44,1.24-3.65,1.88l-1,.53q-5.64,3-11.13,6.23l-.9.53c-1.16.69-2.31,1.39-3.46,2.1l-.86.54q-5.37,3.35-10.56,6.93l-1.08.75c-1.08.76-2.16,1.52-3.23,2.29l-.65.47q-3.27,2.39-6.47,4.84l-.62.48c-1,.78-2,1.58-3,2.39l-1.18.94c-1,.81-2,1.62-3,2.45l0,0c-2.11,1.75-4.18,3.55-6.24,5.37l-1.14,1-2.69,2.45L320.53,305q-4.27,4-8.37,8.17l-1.37,1.41c-.8.82-1.59,1.64-2.37,2.47l-1.37,1.48Q305,320.77,303,323c-.46.51-.92,1-1.37,1.54-.71.81-1.41,1.63-2.11,2.46-.51.59-1,1.18-1.51,1.78-.68.81-1.36,1.62-2,2.44-.54.66-1.07,1.33-1.61,2-1.06,1.33-2.11,2.66-3.15,4-.55.7-1.09,1.4-1.62,2.11s-1.2,1.59-1.79,2.4l-1.59,2.18c-.56.78-1.13,1.55-1.68,2.33-.94,1.34-1.88,2.69-2.8,4.05-.5.73-1,1.48-1.48,2.22s-1.11,1.66-1.65,2.5-1,1.54-1.48,2.31-1.13,1.8-1.69,2.71c-.43.69-.86,1.38-1.28,2.07q-1.32,2.19-2.6,4.4c-.42.72-.82,1.44-1.23,2.16-.54.95-1.08,1.91-1.61,2.87-.4.73-.8,1.46-1.19,2.19-.64,1.19-1.27,2.39-1.89,3.59-.41.78-.81,1.56-1.21,2.34-.64,1.28-1.28,2.55-1.9,3.84-.34.69-.67,1.39-1,2.09-.52,1.09-1,2.19-1.54,3.29l-.91,2q-1.11,2.47-2.17,5c-.22.52-.43,1.05-.65,1.57-.53,1.27-1,2.54-1.56,3.82-.27.67-.53,1.34-.79,2-.49,1.26-1,2.53-1.45,3.8l-.61,1.65q-1,2.63-1.86,5.26l-.56,1.7q-.66,2-1.29,4c-.2.63-.4,1.27-.59,1.91q-.72,2.31-1.38,4.63c-.1.33-.2.66-.29,1q-.78,2.76-1.5,5.54l-.45,1.78c-.19.74-.37,1.49-.55,2.24-1.56,6.69-2.88,13.23-4,19.64-.1.65-.22,1.3-.32,1.95l-.24,1.51q-.45,2.94-.82,5.89c-.06.43-.11.87-.16,1.3-.2,1.59-.38,3.19-.55,4.79l-.18,1.81c-.17,1.68-.32,3.37-.45,5.06l-.09,1q-.23,3-.38,6.05c0,.53-.05,1.07-.08,1.6q-.11,2.36-.18,4.71c0,.59,0,1.18-.05,1.77,0,2.05-.07,4.11-.07,6.17v.1c0,2.22,0,4.42.08,6.62,0,.76.06,1.52.08,2.28.05,1.47.1,2.94.17,4.41.05.89.11,1.77.16,2.66.08,1.33.16,2.66.25,4l.24,2.83c.11,1.26.21,2.52.34,3.77.09,1,.21,1.94.31,2.91.14,1.21.27,2.43.42,3.64.12,1,.26,2,.39,2.95.16,1.18.33,2.37.5,3.55.15,1,.31,2,.47,3,.19,1.16.37,2.33.58,3.49.17,1,.35,2,.54,3,.21,1.15.43,2.3.66,3.44s.4,2,.61,3c.24,1.14.48,2.27.74,3.4s.45,2,.68,2.93c.27,1.13.54,2.25.82,3.36s.49,1.95.75,2.92.59,2.22.9,3.33c.26,1,.53,1.92.81,2.87.32,1.11.65,2.21,1,3.31s.57,1.89.87,2.84.71,2.19,1.07,3.28c.31.93.61,1.87.93,2.8.38,1.09.76,2.18,1.15,3.27l1,2.74c.41,1.09.83,2.18,1.25,3.27.34.89.68,1.79,1,2.68.44,1.09.89,2.19,1.34,3.28.36.86.71,1.73,1.08,2.59.48,1.12,1,2.22,1.46,3.33.36.83.72,1.65,1.09,2.47.52,1.16,1.07,2.3,1.61,3.44.36.77.71,1.54,1.08,2.3.6,1.26,1.23,2.5,1.86,3.75l.95,1.9q2.88,5.61,6,11.07c.36.62.73,1.23,1.09,1.84.7,1.2,1.39,2.4,2.11,3.58.44.72.89,1.42,1.33,2.14.66,1.07,1.32,2.14,2,3.19.48.76,1,1.5,1.47,2.24.65,1,1.31,2,2,3,.51.76,1,1.52,1.56,2.28.66,1,1.32,1.92,2,2.88.54.77,1.1,1.53,1.65,2.3s1.34,1.85,2,2.77,1.15,1.53,1.72,2.29l2.07,2.7c.59.76,1.19,1.51,1.79,2.26s1.41,1.76,2.12,2.63,1.23,1.49,1.85,2.23,1.44,1.72,2.17,2.57l1.91,2.2,2.22,2.5c.65.73,1.31,1.44,2,2.16l1.15,1.25c2.9,1.92-57.48-103.69-17.57-216.15C297.34,465.29,309.57,465.08,325.14,464.92Z" style="fill:',
                shadowHex,
                '"/>'
            )
        );

        string memory s6 = string(
            abi.encodePacked(
                '<path d="M726.85,348.62c-5.4.24-10.66.11-16-.14s-10.59-.67-15.87-1.26c-2.64-.29-5.28-.6-7.91-1s-5.27-.72-7.89-1.23a76.91,76.91,0,0,1-15.58-4.54,91.87,91.87,0,0,1,16-2.62c2.63-.22,5.26-.37,7.89-.48l7.88-.34c5.25-.22,10.49-.34,15.72-.45s10.48-.12,15.62,0Z" style="fill:#592d3d"/>',
                '<path d="M236.6,430s0,.24,0,.39l-.12.53-.28,1.11c-.21.75-.43,1.52-.66,2.29-.47,1.55-1,3.14-1.54,4.75s-1.06,3.28-1.77,5a20.6,20.6,0,0,1-1.38,2.6,17.91,17.91,0,0,1-2.07,2.77,13.14,13.14,0,0,1-3.72-5.47,16.11,16.11,0,0,1-.76-2.9c-.21-1-.31-2-.43-2.95a30,30,0,0,1,0-6,24.44,24.44,0,0,1,.48-3c.12-.5.25-1,.41-1.51a7.84,7.84,0,0,1,.27-.77c.1-.28.18-.48.36-.9Z" style="fill:#592d3d"/>'
            )
        );

        string memory s7 = string(
            abi.encodePacked(
                '<path d="M260.74,460.82v-.06c17-.56,38.63-1.9,62.14-4.84,2.63-55.92,22-121.58,65.92-198.44h0L382,254.23A282.15,282.15,0,0,0,231.16,427.31c-13.86,11.92-26.86,20.34-27,25.69C203.89,462.92,243.47,462.36,260.74,460.82Z" style="fill:',
                shadowHex,
                '"/>',
                '<path d="M784,342.85c-5.1-5.1-31.06,1.83-57.19-.23A281,281,0,0,0,505.63,228.28c-2.44-20.48-.75-37.68-2.61-40.1-2.49-3.22-15.49,12.68-18.87,31-11.91-15-32.14-23-32.72-18.8-.38,2.68,7.44,14.09,14.81,29.9-111.6,13.47-203.08,92.26-235.08,197-13.86,11.92-26.86,20.34-27,25.69-.27,9.92,39.31,9.36,56.58,7.82v-.06c60.65-2,179-13.78,236.42-72.89C491.64,406.93,481.47,421,483.43,424c3,4.67,38.32-5.19,50.07-23.24,48,19.59,139.49,43.16,219-16.16l-.22-.43C766.77,372.06,790.35,349.25,784,342.85Z" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>'
            )
        );

        string memory s8 = string(
            abi.encodePacked(
                '<path d="M505.93,244.31a367.42,367.42,0,0,0-42.48,4.94c-3.48.67-6.95,1.41-10.44,2.05s-6.9,1.61-10.35,2.41l-10.26,2.72c-3.4,1-6.77,2.08-10.15,3.12a314.12,314.12,0,0,0-39.43,15.73,348.31,348.31,0,0,0-37.25,21,183.85,183.85,0,0,1,35.08-25.14,219.23,219.23,0,0,1,39.76-17.29c3.48-1,6.94-2.09,10.42-3.05s7-1.82,10.55-2.6,7.1-1.41,10.66-2,7.15-1.07,10.73-1.52A190,190,0,0,1,505.93,244.31Z" style="fill:#fff"/>'
            )
        );

        return SVGBody.fullSVG(
            'id="pixie-cut" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(abi.encodePacked(s1, s2, s3, s4, s5, s6, s7, s8))
        );
    }

    function renderLongHairFrontSVG(bytes3 baseColor, bytes3 shadowColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);
        string memory shadowHex = BytesConverter.bytesToHex(shadowColor);

        string memory s1 = string(
            abi.encodePacked(
                '<path d="M559.29,397.34c-12.87,24-60,37.44-63.83,31.42-4.3-6.73,37.84-55.32,13.9-106.14" fill=',
                shadowHex,
                " />",
                '<path d="M746.9,365.72c-43.51-90.29-140.27-142-244.74-142-131.19,0-253.5,95-275.32,223.74,0,0,202.41,15.32,275.25-67.4C511.7,384.77,658.18,457.67,746.9,365.72Z" fill=',
                baseHex,
                " />"
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M502.16,233.15a361.93,361.93,0,0,0-51.86,7.33l-12.68,3.05c-4.2,1.13-8.36,2.37-12.54,3.55l-12.39,4c-4.09,1.46-8.13,3-12.2,4.54a339.08,339.08,0,0,0-46.87,22.71,388.52,388.52,0,0,0-43.25,29.58,233,233,0,0,1,40.79-33.56,258.22,258.22,0,0,1,47.14-24.31c4.17-1.5,8.32-3.06,12.5-4.51,4.24-1.29,8.44-2.7,12.7-3.9s8.58-2.19,12.89-3.21,8.68-1.76,13-2.53A224.82,224.82,0,0,1,502.16,233.15Z" fill=',
                BytesConverter.bytesToHex(Colors.DEFAULT_STROKE),
                " />",
                '<path d="M537.23,398.81C526.9,418.12,489.07,428.88,486,424c-3.45-5.4,30.38-44.42,11.16-85.22" fill=',
                baseHex,
                " />"
            )
        );

        string memory s3 = string(
            abi.encodePacked(
                '<path d="M240.15,454.33s185.57,8.28,259.86-72c-5,19.52-15.75,34.09-13.79,37.16,2.89,4.53,38-5.42,48.16-23.35,45.56,19,131.48,41.33,206.15-16.09" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px" />'
            )
        );

        return SVGBody.fullSVG(
            'id="long-hair-front" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(abi.encodePacked(s1, s2, s3))
        );
    }

    function renderLongHairBackSVG(bytes3 baseColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);

        return SVGBody.fullSVG(
            'id="long-hair-back" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(
                abi.encodePacked(
                    '<path d="M501.71,209.52c-166.14,0-300.83,134.68-300.83,300.83V816.78c0,166.14,134.69,300.83,300.83,300.83S802.54,982.92,802.54,816.78V510.35C802.54,344.2,667.85,209.52,501.71,209.52Z" fill=',
                    baseHex,
                    " stroke=",
                    BytesConverter.bytesToHex(Colors.DEFAULT_STROKE),
                    ' strokeMiterlimit={10} strokeWidth="12px" />'
                )
            )
        );
    }

    function renderPixieCutSVG(bytes3 baseColor, bytes3 shadowColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);
        string memory shadowHex = BytesConverter.bytesToHex(shadowColor);

        string memory s1 = string(
            abi.encodePacked(
                '<rect x="290.23" y="414.02" width="439.24" height="64.15" style="fill:none "/>',
                '<path d="M710,667.66q-4.71,5.82-9.71,11.37C697.79,681.8,702.87,677.91,710,667.66Zm15-316.55C694.5,296.7,641.5,259.24,580.22,242l-6.35-1.71c-22.7-6.28-46.62-7-71.32-7-26.69,0-52.46,2.74-76.77,10l-4.26,1.27C335.16,273.62,263.78,346.74,245.06,429.8,213,556.34,262.89,634,307.17,681.6c4.37,4.7-57.93-101.85-17.42-216,7.73-.29,20.24-.51,36.19-.67l15.5-50.61,17.44,50.38c27.4-.13,59.88-.15,93.88-.12l12.32-52.36L479,464.6c74.37.14,151.44.52,195.28.77l13.2-52.17,15,52.33,8.21.05C760.78,572,728.5,641.13,710,667.66A265.62,265.62,0,0,0,769.3,500C769.3,413.58,725,351.11,725,351.11Z" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M325.14,464.92c.9-57.85,19.88-126.43,66.22-207.44h0q-4.07,1.88-8.06,3.88l-.59.29c-1.22.61-2.44,1.24-3.65,1.88l-1,.53q-5.64,3-11.13,6.23l-.9.53c-1.16.69-2.31,1.39-3.46,2.1l-.86.54q-5.37,3.35-10.56,6.93l-1.08.75c-1.08.76-2.16,1.52-3.23,2.29l-.65.47q-3.27,2.39-6.47,4.84l-.62.48c-1,.78-2,1.58-3,2.39l-1.18.94c-1,.81-2,1.62-3,2.45l0,0c-2.11,1.75-4.18,3.55-6.24,5.37l-1.14,1-2.69,2.45L320.53,305q-4.27,4-8.37,8.17l-1.37,1.41c-.8.82-1.59,1.64-2.37,2.47l-1.37,1.48Q305,320.77,303,323c-.46.51-.92,1-1.37,1.54-.71.81-1.41,1.63-2.11,2.45L298,328.8c-.68.81-1.36,1.62-2,2.44-.54.66-1.07,1.33-1.61,2-1.06,1.33-2.11,2.66-3.15,4-.55.7-1.09,1.4-1.62,2.11s-1.2,1.59-1.79,2.4l-1.59,2.18c-.56.78-1.13,1.55-1.68,2.33-.94,1.34-1.88,2.69-2.8,4.05-.5.73-1,1.48-1.48,2.22s-1.11,1.66-1.65,2.5-1,1.54-1.48,2.31-1.13,1.8-1.69,2.71c-.43.69-.86,1.38-1.28,2.07q-1.32,2.19-2.6,4.4c-.42.72-.82,1.44-1.23,2.16-.54.95-1.08,1.91-1.61,2.87-.4.73-.8,1.46-1.19,2.19-.64,1.19-1.27,2.39-1.89,3.59-.41.78-.81,1.56-1.21,2.34-.64,1.28-1.28,2.55-1.9,3.84-.34.69-.67,1.39-1,2.09-.52,1.09-1,2.19-1.54,3.29l-.91,2q-1.11,2.47-2.17,5c-.22.52-.43,1.05-.65,1.57-.53,1.27-1,2.54-1.56,3.82-.27.67-.53,1.34-.79,2-.49,1.26-1,2.53-1.45,3.8l-.61,1.65q-1,2.63-1.86,5.26l-.56,1.7q-.66,2-1.29,4c-.2.63-.4,1.27-.59,1.91q-.72,2.31-1.38,4.63c-.1.33-.2.66-.29,1q-.78,2.76-1.5,5.54l-.45,1.78c-.19.74-.37,1.49-.55,2.24-1.56,6.69-2.88,13.23-4,19.64-.1.65-.22,1.3-.32,1.95l-.24,1.51q-.45,2.94-.82,5.89c-.06.43-.11.87-.16,1.3-.2,1.59-.38,3.19-.55,4.79l-.18,1.81c-.17,1.68-.32,3.37-.45,5.06l-.09,1q-.23,3-.38,6.05c0,.53-.05,1.07-.08,1.6q-.11,2.36-.18,4.71c0,.59,0,1.18-.05,1.77,0,2.05-.07,4.11-.07,6.17v.1c0,2.22,0,4.42.08,6.62,0,.76.06,1.52.08,2.28.05,1.47.1,2.94.17,4.41.05.89.11,1.77.16,2.66.08,1.33.16,2.66.25,4l.24,2.83c.11,1.26.21,2.52.34,3.77.09,1,.21,1.94.31,2.91.14,1.21.27,2.43.42,3.64.12,1,.26,2,.39,2.95.16,1.18.33,2.37.5,3.55.15,1,.31,2,.47,3,.19,1.16.37,2.33.58,3.49.17,1,.35,2,.54,3,.21,1.15.43,2.3.66,3.44s.4,2,.61,3c.24,1.14.48,2.27.74,3.4s.45,2,.68,2.93c.27,1.13.54,2.25.82,3.36s.49,1.95.75,2.92.59,2.22.9,3.33c.26,1,.53,1.92.81,2.87.32,1.11.65,2.21,1,3.31s.57,1.89.87,2.84.71,2.19,1.07,3.28c.31.93.61,1.87.93,2.8.38,1.09.76,2.18,1.15,3.27l1,2.74c.41,1.09.83,2.18,1.25,3.27.34.89.68,1.79,1,2.68.44,1.09.89,2.19,1.34,3.28.36.86.71,1.73,1.08,2.59.48,1.12,1,2.22,1.46,3.33.36.83.72,1.65,1.09,2.47.52,1.16,1.07,2.3,1.61,3.44.36.77.71,1.54,1.08,2.3.6,1.26,1.23,2.5,1.86,3.75l.95,1.9q2.88,5.61,6,11.07c.36.62.73,1.23,1.09,1.84.7,1.2,1.39,2.4,2.11,3.58.44.72.89,1.42,1.33,2.14.66,1.07,1.32,2.14,2,3.19.48.76,1,1.5,1.47,2.24.65,1,1.31,2,2,3,.51.76,1,1.52,1.56,2.28.66,1,1.32,1.92,2,2.88.54.77,1.1,1.53,1.65,2.3s1.34,1.85,2,2.77,1.15,1.53,1.72,2.29l2.07,2.7c.59.76,1.19,1.51,1.79,2.26s1.41,1.76,2.12,2.63,1.23,1.49,1.85,2.23,1.44,1.72,2.17,2.57l1.91,2.2,2.22,2.5c.65.73,1.31,1.44,2,2.16l1.15,1.25c2.9,1.92-57.48-103.69-17.57-216.15C297.34,465.29,309.57,465.08,325.14,464.92Z" style="fill:',
                shadowHex,
                '"/>'
            )
        );

        string memory s3 = string(
            abi.encodePacked(
                '<path d="M657.94,378.93s-2.1,20.81-50.63,28.22c23.11,1.6,47.74-.46,71.38-9.51C681.91,401.25,657.94,378.93,657.94,378.93Z" style="fill:',
                shadowHex,
                '"/>',
                '<path d="M304.74,441s-11,1.14-30.77-1.89" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s4 = string(
            abi.encodePacked(
                '<path d="M305.35,447c-.51.08-.81.11-1.19.15s-.71.07-1.07.1c-.7,0-1.39.08-2.08.08-1.37,0-2.73,0-4.08-.16a61,61,0,0,1-8-1.22c-1.31-.29-2.61-.59-3.9-1a31.69,31.69,0,0,1-3.83-1.25,22.55,22.55,0,0,1-7.25-4.59,23.84,23.84,0,0,1,4.11-1.63,31.51,31.51,0,0,1,3.95-.91c2.59-.42,5.12-.55,7.64-.79s5-.39,7.45-.53c1.22-.08,2.44-.12,3.63-.17l1.78,0c.29,0,.59,0,.86,0s.6,0,.73,0Z" style="fill:#592d3d"/>',
                '<path d="M677,396.19s-10.71-14.3-40.38-31" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s5 = string(
            abi.encodePacked(
                '<path d="M672.14,399.78l-1.77-1.91-2-2.12c-1.39-1.41-2.82-2.85-4.27-4.25-2.92-2.82-5.95-5.62-9-8.4s-6.3-5.44-9.43-8.32c-1.56-1.44-3.13-2.91-4.63-4.52a48,48,0,0,1-4.39-5.1,43.5,43.5,0,0,1,6.65,1.34,60,60,0,0,1,6.24,2.24c2,.89,4,1.83,5.91,2.91s3.84,2.13,5.72,3.29A96.15,96.15,0,0,1,672,382.62c1.71,1.45,3.43,2.91,5,4.53.82.79,1.61,1.63,2.39,2.5.39.45.78.87,1.16,1.35s.72.89,1.22,1.59Z" style="fill:#592d3d"/>',
                '<path d="M421.52,244.56C335.16,273.62,263.78,346.74,245.06,429.8,213,556.34,262.89,634,307.17,681.6c4.37,4.7-69.46-138.26-2.43-241,61.1-2.32,152.42-14.38,195.78-62.86C496.18,398.87,484,415,486,418.18c2.88,4.51,38.19-5.53,47.84-23.54l.83-3.61c34.72,12.58,91.76,26.59,144,6.61C801.81,535.94,691.29,689,700.3,679a265.78,265.78,0,0,0,69-179c0-86.42-44.28-148.89-44.28-148.89C694.5,296.7,641.5,259.24,580.22,242" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>'
            )
        );

        string memory s6 = string(
            abi.encodePacked(
                '<path d="M520.11,249.17a367.15,367.15,0,0,0-42.48,4.93c-3.49.68-7,1.42-10.44,2.06s-6.9,1.61-10.35,2.41l-10.27,2.72c-3.39,1-6.76,2.08-10.14,3.11A312.8,312.8,0,0,0,397,280.14a347.55,347.55,0,0,0-37.25,21A183.48,183.48,0,0,1,394.83,276a218.27,218.27,0,0,1,39.76-17.3c3.47-1,6.93-2.08,10.42-3.05s7-1.82,10.54-2.59,7.1-1.41,10.66-2,7.15-1.08,10.74-1.52A189.39,189.39,0,0,1,520.11,249.17Z" style="fill:#ffffff"/>',
                '<path d="M529.83,233.83a70.16,70.16,0,0,1,15.44-1.92c2.56-.06,5.11,0,7.67.13s5.12.3,7.68.52a138.69,138.69,0,0,1,15.35,2.2A95.37,95.37,0,0,1,591.05,239l-3.9,11.35c-4.61-1.38-9.24-2.78-13.94-4.07s-9.45-2.51-14.25-3.71l-7.25-1.76c-2.43-.57-4.87-1.15-7.3-1.81A85.14,85.14,0,0,1,529.83,233.83Z" style="fill:#592d3d"/>',
                '<path d="M412.45,241.49a96.65,96.65,0,0,1,13.65-4.15,138.88,138.88,0,0,1,14-2.45c2.34-.28,4.68-.53,7-.71s4.69-.33,7-.34a57.35,57.35,0,0,1,14.27,1.58,77.5,77.5,0,0,1-13.13,5.5c-2.19.73-4.39,1.37-6.59,2l-6.55,1.93c-4.34,1.32-8.67,2.6-12.94,4s-8.52,2.72-12.79,4Z" style="fill:#592d3d"/>',
                '<circle cx="514.26" cy="233.25" r="5.84" style="fill:#592d3d"/>',
                '<circle cx="497.99" cy="233.25" r="4.13" style="fill:#592d3d"/>'
            )
        );

        return SVGBody.fullSVG(
            'id="bun-hair" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(abi.encodePacked(s1, s2, s3, s4, s5, s6))
        );
    }

    function renderShortHairSVG(bytes3 baseColor, bytes3 shadowColor) private pure returns (string memory) {
        string memory baseHex = BytesConverter.bytesToHex(baseColor);
        string memory shadowHex = BytesConverter.bytesToHex(shadowColor);

        string memory s1 = string(
            abi.encodePacked(
                '<path d="M558.73,399.34c-12.86,24-60,37.44-63.83,31.42-4.29-6.73,37.85-55.32,13.9-106.14" style="fill:#f3ab98"/>',
                '<path d="M784,342.85c-5.1-5.1-31.06,1.83-57.19-.23A281,281,0,0,0,505.63,228.28c-2.44-20.48-.75-37.68-2.61-40.1-2.49-3.22-15.49,12.68-18.87,31-11.91-15-32.14-23-32.72-18.8-.38,2.68,7.44,14.09,14.81,29.9-111.6,13.47-203.08,92.26-235.08,197-13.86,11.92-26.86,20.34-27,25.69-.27,9.92,39.31,9.36,56.58,7.82v-.06c60.65-2,179-13.78,236.42-72.89C491.64,406.93,481.47,421,483.43,424c3,4.67,38.32-5.19,50.07-23.24,48,19.59,139.49,43.16,219-16.16l-.22-.43C766.77,372.06,790.35,349.25,784,342.85Z" style="fill:',
                baseHex,
                '"/>'
            )
        );

        string memory s2 = string(
            abi.encodePacked(
                '<path d="M726.85,348.62c-5.4.24-10.66.11-16-.14s-10.59-.67-15.87-1.26c-2.64-.29-5.28-.6-7.91-1s-5.27-.72-7.89-1.23a76.91,76.91,0,0,1-15.58-4.54,91.87,91.87,0,0,1,16-2.62c2.63-.22,5.26-.37,7.89-.48l7.88-.34c5.25-.22,10.49-.34,15.72-.45s10.48-.12,15.62,0Z" style="fill:#592d3d"/>',
                '<path d="M236.6,430s0,.24,0,.39l-.12.53-.28,1.11c-.21.75-.43,1.52-.66,2.29-.47,1.55-1,3.14-1.54,4.75s-1.06,3.28-1.77,5a20.6,20.6,0,0,1-1.38,2.6,17.91,17.91,0,0,1-2.07,2.77,13.14,13.14,0,0,1-3.72-5.47,16.11,16.11,0,0,1-.76-2.9c-.21-1-.31-2-.43-2.95a30,30,0,0,1,0-6,24.44,24.44,0,0,1,.48-3c.12-.5.25-1,.41-1.51a7.84,7.84,0,0,1,.27-.77c.1-.28.18-.48.36-.9Z" style="fill:#592d3d"/>'
            )
        );

        string memory s3 = string(
            abi.encodePacked(
                '<path d="M260.74,460.82v-.06c17-.56,38.63-1.9,62.14-4.84,2.63-55.92,22-121.58,65.92-198.44h0L382,254.23A282.15,282.15,0,0,0,231.16,427.31c-13.86,11.92-26.86,20.34-27,25.69C203.89,462.92,243.47,462.36,260.74,460.82Z" style="fill:',
                shadowHex,
                '"/>',
                '<path d="M784,342.85c-5.1-5.1-31.06,1.83-57.19-.23A281,281,0,0,0,505.63,228.28c-2.44-20.48-.75-37.68-2.61-40.1-2.49-3.22-15.49,12.68-18.87,31-11.91-15-32.14-23-32.72-18.8-.38,2.68,7.44,14.09,14.81,29.9-111.6,13.47-203.08,92.26-235.08,197-13.86,11.92-26.86,20.34-27,25.69-.27,9.92,39.31,9.36,56.58,7.82v-.06c60.65-2,179-13.78,236.42-72.89C491.64,406.93,481.47,421,483.43,424c3,4.67,38.32-5.19,50.07-23.24,48,19.59,139.49,43.16,219-16.16l-.22-.43C766.77,372.06,790.35,349.25,784,342.85Z" style="fill:none;stroke:#592d3d;stroke-miterlimit:10;stroke-width:12px"/>'
            )
        );

        string memory s4 = string(
            abi.encodePacked(
                '<path d="M505.93,244.31a367.42,367.42,0,0,0-42.48,4.94c-3.48.67-6.95,1.41-10.44,2.05s-6.9,1.61-10.35,2.41l-10.26,2.72c-3.4,1-6.77,2.08-10.15,3.12a314.12,314.12,0,0,0-39.43,15.73,348.31,348.31,0,0,0-37.25,21,183.85,183.85,0,0,1,35.08-25.14,219.23,219.23,0,0,1,39.76-17.29c3.48-1,6.94-2.09,10.42-3.05s7-1.82,10.55-2.6,7.1-1.41,10.66-2,7.15-1.07,10.73-1.52A190,190,0,0,1,505.93,244.31Z" style="fill:#fff"/>'
            )
        );

        return SVGBody.fullSVG(
            'id="short-hair" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"',
            string(abi.encodePacked(s1, s2, s3, s4))
        );
    }
}
